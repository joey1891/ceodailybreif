<think>
사용자는 카테고리 관리 시스템에 대한 전반적인 가이드를 요청했습니다. 이 가이드는 카테고리와 관련된 변경 작업을 설명해야 합니다. 주요 내용은 다음과 같이 구성할 수 있습니다:

1. 카테고리 관리 구조 개요
   - 데이터 흐름과 카테고리 저장 방식
   - 관련 파일 구조 설명

2. 카테고리 정의 파일 설명
   - category-mappings.ts
   - category-options.ts
   - 각 파일의 역할

3. 카테고리 수정 방법
   - 메인 카테고리 추가/수정
   - 서브 카테고리 추가/수정
   - 서브서브 카테고리 추가/수정

4. 데이터베이스 연동 관련 참고사항
   - DB에 저장된 카테고리와 프론트엔드 표시 방식의 연결

5. 주의사항 및 모범 사례
   - 작업 시 주의해야 할 점들
   - 일관성 유지 방법

이에 따라 가이드를 작성하겠습니다.
</think>

# 기사 관리 시스템 카테고리 가이드

## 카테고리 관리 구조 개요

현재 시스템은 **영문 슬러그**를 DB에 저장하고, 사용자에게는 **한글 카테고리명**을 표시하는 구조로 설계되어 있습니다. 카테고리 관리에는 다음 파일들이 핵심적인 역할을 합니다:

1. **lib/category-mappings.ts**: 한글 ↔ 영문 간 매핑 정의
2. **lib/category-options.ts**: 카테고리 구조와 계층 정의
3. **app/admin/articles/page.tsx**: 카테고리 표시 및 필터링 로직

## 카테고리 수정 방법

### 1. 메인 카테고리 추가/수정

메인 카테고리를 추가하거나 수정하려면:

```typescript
// lib/category-mappings.ts에서 매핑 추가
export const categoryMappings: Record<string, string> = {
  // 기존 코드...
  "새 카테고리": "new-category", // 새 메인 카테고리 추가
  // 또는 기존 항목 수정
};

// lib/category-options.ts에서 구조 정의
export const categoryOptions = new Map<string, CategoryOption>([
  // 기존 코드...
  [
    "새 카테고리",
    {
      title: "새 카테고리",
      href: "/new-category", // URL 경로 정의
      items: [], // 하위 카테고리 없는 경우
    },
  ],
]);
```

### 2. 서브 카테고리 추가/수정

특정 메인 카테고리 아래 서브 카테고리를 추가하려면:

```typescript
// lib/category-mappings.ts에서 매핑 추가
export const categoryMappings: Record<string, string> = {
  // 기존 코드...
  "새 서브카테고리": "new-subcategory",
};

// 특정 메인 카테고리에 종속된 서브카테고리인 경우 contextualCategoryMappings 수정
export const contextualCategoryMappings: Record<string, Record<string, string>> = {
  "industry": {
    // 기존 코드...
    "새 서브카테고리": "new-subcategory", // 산업 동향 아래 새 서브카테고리
  },
};

// lib/category-options.ts에서 해당 메인 카테고리의 items에 추가
[
  "산업 동향",
  {
    title: "산업 동향",
    href: "/industry",
    items: [
      // 기존 items...
      {title: "새 서브카테고리", slug: "new-subcategory"}, // 추가
    ],
  },
],
```

### 3. 서브서브 카테고리 추가/수정

서브카테고리 아래 추가 레벨의 카테고리가 필요한 경우:

```typescript
// lib/category-options.ts에서 서브카테고리의 items에 추가
[
  "경제 동향",
  {
    title: "경제 동향",
    href: "/economic-trends",
    items: [
      // 다른 서브카테고리들...
      {
        title: "기업투자", 
        slug: "corporate-investment",
        items: [
          // 기존 서브서브 카테고리들...
          {title: "새 서브서브 카테고리", slug: "new-sub-sub-category"}, // 추가
        ],
      },
    ],
  },
],

// 필요시 category-mappings.ts에도 매핑 추가
export const categoryMappings: Record<string, string> = {
  // 기존 코드...
  "새 서브서브 카테고리": "new-sub-sub-category",
};
```

## 카테고리명 변경하기

기존 카테고리의 표시 이름을 변경하되 DB의 슬러그 값은 유지하려면:

```typescript
// lib/category-options.ts에서 title만 변경
[
  "변경된 카테고리명", // 이전: "기존 카테고리명"
  {
    title: "변경된 카테고리명", // 이전: "기존 카테고리명"
    href: "/existing-slug", // 슬러그는 그대로 유지
    items: [...],
  },
],

// lib/category-mappings.ts에서 매핑 키 변경
export const categoryMappings: Record<string, string> = {
  // 기존 항목 제거
  // "기존 카테고리명": "existing-slug",
  
  // 새 항목 추가
  "변경된 카테고리명": "existing-slug",
};
```

## 실제 DB 데이터 업데이트

카테고리 구조 변경 후 기존 데이터를 업데이트해야 할 경우:

```sql
-- 카테고리 이름만 변경한 경우 (슬러그 유지) DB 변경 불필요

-- 슬러그를 변경한 경우 DB 업데이트 필요
UPDATE posts 
SET category = 'new-category-slug' 
WHERE category = 'old-category-slug';

-- 서브카테고리 변경 시
UPDATE posts 
SET subcategory = 'new-subcategory-slug' 
WHERE subcategory = 'old-subcategory-slug';
```

## 주의사항

1. **일관성 유지**: `category-mappings.ts`와 `category-options.ts` 파일 간의 매핑이 일관되게 유지되어야 합니다.

2. **슬러그 변경**: 슬러그를 변경하면 URL과 DB 저장값이 모두 변경되므로, 기존 데이터도 함께 마이그레이션해야 합니다.

3. **중복 방지**: 서로 다른 카테고리에 동일한 서브카테고리 이름을 사용할 경우, `contextualCategoryMappings`에 적절히 정의해야 올바른 슬러그로 변환됩니다.

4. **리버스 매핑**: 영문→한글 변환을 위한 `reverseCategoryMappings`는 자동 생성되므로 따로 수정할 필요가 없습니다.

5. **URL 경로**: `href` 속성은 웹사이트 URL 경로에 영향을 주므로 신중하게 변경해야 합니다.

## 변경 후 테스트

카테고리 구조를 변경한 후 다음 항목을 테스트하세요:

1. 관리자 페이지에서 카테고리 필터링이 올바르게 작동하는지
2. 새 기사 작성 시 카테고리 선택이 올바르게 표시되는지
3. 기존 기사의 카테고리 표시가 올바른지
4. 프론트엔드 웹사이트에서 카테고리 네비게이션이 정상 작동하는지

이 가이드를 따라 카테고리 시스템을 관리하면 일관성 있는 사용자 경험을 제공하고 데이터 무결성을 유지할 수 있습니다.
